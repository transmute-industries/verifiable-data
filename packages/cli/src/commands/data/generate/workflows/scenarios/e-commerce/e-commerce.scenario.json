{
  "xml": "\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<bpmn:definitions\n    id=\"new-process-diagram\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\"\n    xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\"\n    xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\"\n    xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\"\n    targetNamespace=\"http://bpmn.io/schema/bpmn\">\n\n\n\n<bpmn:process id=\"Process_0\" isExecutable=\"true\">\n\n<bpmn:startEvent id=\"StartEvent_0\" name=\"Start\">\n<bpmn:outgoing>geid_108_0</bpmn:outgoing>\n</bpmn:startEvent>\n          \n\n\n<bpmn:scriptTask id=\"Task_0\" name=\"Order Received in China\" scriptFormat=\"JavaScript\">\n  <script>\n    \n  \n  (async ()=>{\n    const {tslib_1} = this.environment.variables;\n    const taskFunction = function (_a) {\n            var output = _a.output, services = _a.services, variables = _a.variables;\n            return tslib_1.__awaiter(void 0, void 0, void 0, function () {\n                var manufacturer, vc1, vp1;\n                return tslib_1.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            // services.console.log('product ordered from China.');\n                            output.actors = output.actors || {};\n                            output.presentations = output.presentation || [];\n                            return [4 /*yield*/, services.fake.actor.generate({\n                                    type: 'Organization',\n                                    seed: variables.manufacturer.seed, // controls identity\n                                })];\n                        case 1:\n                            manufacturer = _b.sent();\n                            output.actors.manufacturer = manufacturer;\n                            return [4 /*yield*/, manufacturer.credential.generate({\n                                    type: 'CertifiedPurchaseOrder',\n                                    subject: {\n                                        manufacturer: variables.manufacturer,\n                                        product: variables.product,\n                                    },\n                                })];\n                        case 2:\n                            vc1 = _b.sent();\n                            return [4 /*yield*/, manufacturer.present({\n                                    workflow: variables.workflow,\n                                    credentials: [vc1],\n                                })];\n                        case 3:\n                            vp1 = _b.sent();\n                            output.presentations.push(vp1);\n                            return [2 /*return*/, {}];\n                    }\n                });\n            });\n        };\n    const invocation = await taskFunction(this.environment);\n    const output = invocation;\n    next(null, output);\n  })()\n  \n        \n  </script>\n\n<bpmn:incoming>geid_108_0</bpmn:incoming>\n\n<bpmn:outgoing>geid_108_1</bpmn:outgoing>\n</bpmn:scriptTask>\n        \n\n\n<bpmn:scriptTask id=\"Task_1\" name=\"Product Manufactured in China\" scriptFormat=\"JavaScript\">\n  <script>\n    \n  \n  (async ()=>{\n    const {tslib_1} = this.environment.variables;\n    const taskFunction = function (_a) {\n            var output = _a.output, variables = _a.variables;\n            return tslib_1.__awaiter(void 0, void 0, void 0, function () {\n                var manufacturer, vc1, vc2, vc3, vp1;\n                return tslib_1.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            manufacturer = output.actors.manufacturer;\n                            return [4 /*yield*/, manufacturer.credential.generate({\n                                    type: 'CertifiedOrigin',\n                                    subject: tslib_1.__assign({}, variables.product),\n                                })];\n                        case 1:\n                            vc1 = _b.sent();\n                            return [4 /*yield*/, manufacturer.credential.generate({\n                                    type: 'CertifiedCommercialInvoice',\n                                    subject: tslib_1.__assign({}, variables.product),\n                                })];\n                        case 2:\n                            vc2 = _b.sent();\n                            return [4 /*yield*/, manufacturer.credential.generate({\n                                    type: 'CertifiedPackingList',\n                                    subject: tslib_1.__assign({}, variables.product),\n                                })];\n                        case 3:\n                            vc3 = _b.sent();\n                            return [4 /*yield*/, manufacturer.present({\n                                    workflow: variables.workflow,\n                                    credentials: [vc1, vc2, vc3],\n                                })];\n                        case 4:\n                            vp1 = _b.sent();\n                            output.presentations.push(vp1);\n                            return [2 /*return*/, {}];\n                    }\n                });\n            });\n        };\n    const invocation = await taskFunction(this.environment);\n    const output = invocation;\n    next(null, output);\n  })()\n  \n        \n  </script>\n\n<bpmn:incoming>geid_108_1</bpmn:incoming>\n\n<bpmn:outgoing>geid_108_2</bpmn:outgoing>\n</bpmn:scriptTask>\n        \n\n\n<bpmn:scriptTask id=\"Task_2\" name=\"Product Shipped to Denmark\" scriptFormat=\"JavaScript\">\n  <script>\n    \n  \n  (async ()=>{\n    const {tslib_1} = this.environment.variables;\n    const taskFunction = function (_a) {\n            var output = _a.output, services = _a.services, variables = _a.variables;\n            return tslib_1.__awaiter(void 0, void 0, void 0, function () {\n                var oceanCarrier, vc1, vp1;\n                return tslib_1.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, services.fake.actor.generate({\n                                type: 'Organization',\n                                seed: variables.oceanCarrier.seed,\n                            })];\n                        case 1:\n                            oceanCarrier = _b.sent();\n                            output.actors.oceanCarrier = oceanCarrier;\n                            return [4 /*yield*/, oceanCarrier.credential.generate({\n                                    type: 'CertifiedBillOfLading',\n                                    subject: tslib_1.__assign({}, variables.product),\n                                })];\n                        case 2:\n                            vc1 = _b.sent();\n                            return [4 /*yield*/, oceanCarrier.present({\n                                    workflow: variables.workflow,\n                                    credentials: [vc1],\n                                })];\n                        case 3:\n                            vp1 = _b.sent();\n                            output.presentations.push(vp1);\n                            return [2 /*return*/, {}];\n                    }\n                });\n            });\n        };\n    const invocation = await taskFunction(this.environment);\n    const output = invocation;\n    next(null, output);\n  })()\n  \n        \n  </script>\n\n<bpmn:incoming>geid_108_2</bpmn:incoming>\n\n<bpmn:outgoing>geid_108_3</bpmn:outgoing>\n</bpmn:scriptTask>\n        \n\n\n<bpmn:scriptTask id=\"Task_3\" name=\"Product Shipped to United States\" scriptFormat=\"JavaScript\">\n  <script>\n    \n  \n  (async ()=>{\n    const {tslib_1} = this.environment.variables;\n    const taskFunction = function (_a) {\n            var output = _a.output, services = _a.services, variables = _a.variables;\n            return tslib_1.__awaiter(void 0, void 0, void 0, function () {\n                var distributor, airCarrier, vc1, vc2, vc3, vp1;\n                return tslib_1.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, services.fake.actor.generate({\n                                type: 'Organization',\n                                seed: variables.distributor.seed,\n                            })];\n                        case 1:\n                            distributor = _b.sent();\n                            output.actors.distributor = distributor;\n                            return [4 /*yield*/, services.fake.actor.generate({\n                                    type: 'Organization',\n                                    seed: variables.airCarrier.seed,\n                                })];\n                        case 2:\n                            airCarrier = _b.sent();\n                            output.actors.airCarrier = airCarrier;\n                            return [4 /*yield*/, distributor.credential.generate({\n                                    type: 'CertifiedUSImportDeclaration',\n                                    subject: tslib_1.__assign({}, variables.product),\n                                })];\n                        case 3:\n                            vc1 = _b.sent();\n                            return [4 /*yield*/, distributor.credential.generate({\n                                    type: 'CertifiedCommercialInvoice',\n                                    subject: tslib_1.__assign({}, variables.product),\n                                })];\n                        case 4:\n                            vc2 = _b.sent();\n                            return [4 /*yield*/, airCarrier.credential.generate({\n                                    type: 'CertifiedAirWaybill',\n                                    subject: tslib_1.__assign({}, variables.product),\n                                })];\n                        case 5:\n                            vc3 = _b.sent();\n                            return [4 /*yield*/, airCarrier.present({\n                                    workflow: variables.workflow,\n                                    credentials: [vc1, vc2, vc3],\n                                })];\n                        case 6:\n                            vp1 = _b.sent();\n                            output.presentations.push(vp1);\n                            return [2 /*return*/, {}];\n                    }\n                });\n            });\n        };\n    const invocation = await taskFunction(this.environment);\n    const output = invocation;\n    next(null, output);\n  })()\n  \n        \n  </script>\n\n<bpmn:incoming>geid_108_3</bpmn:incoming>\n\n<bpmn:outgoing>geid_108_4</bpmn:outgoing>\n</bpmn:scriptTask>\n        \n\n\n<bpmn:scriptTask id=\"Task_4\" name=\"US Customs Approval\" scriptFormat=\"JavaScript\">\n  <script>\n    \n  \n  (async ()=>{\n    const {tslib_1} = this.environment.variables;\n    const taskFunction = function (_a) {\n            var output = _a.output, services = _a.services, variables = _a.variables;\n            return tslib_1.__awaiter(void 0, void 0, void 0, function () {\n                var customs, vc1, vp1;\n                return tslib_1.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, services.fake.actor.generate({\n                                type: 'Organization',\n                                seed: variables.customs.seed,\n                            })];\n                        case 1:\n                            customs = _b.sent();\n                            output.actors.customs = customs;\n                            return [4 /*yield*/, customs.credential.generate({\n                                    type: 'CertifiedImportAproval',\n                                    subject: tslib_1.__assign({}, variables.product),\n                                })];\n                        case 2:\n                            vc1 = _b.sent();\n                            return [4 /*yield*/, customs.present({\n                                    workflow: variables.workflow,\n                                    credentials: [vc1],\n                                })];\n                        case 3:\n                            vp1 = _b.sent();\n                            output.presentations.push(vp1);\n                            return [2 /*return*/, {}];\n                    }\n                });\n            });\n        };\n    const invocation = await taskFunction(this.environment);\n    const output = invocation;\n    next(null, output);\n  })()\n  \n        \n  </script>\n\n<bpmn:incoming>geid_108_4</bpmn:incoming>\n\n<bpmn:outgoing>geid_108_5</bpmn:outgoing>\n</bpmn:scriptTask>\n        \n\n\n<bpmn:scriptTask id=\"Task_5\" name=\"Product Sold in US\" scriptFormat=\"JavaScript\">\n  <script>\n    \n  \n  (async ()=>{\n    const {tslib_1} = this.environment.variables;\n    const taskFunction = function (_a) {\n            var output = _a.output, services = _a.services, variables = _a.variables;\n            return tslib_1.__awaiter(void 0, void 0, void 0, function () {\n                var importer, traceabilityPath, vc1, vp1;\n                return tslib_1.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, services.fake.actor.generate({\n                                type: 'Organization',\n                                seed: variables.importer.seed,\n                            })];\n                        case 1:\n                            importer = _b.sent();\n                            output.actors.importer = importer;\n                            traceabilityPath = output.path.map(function (i) {\n                                return { id: i.id, name: i.name };\n                            });\n                            return [4 /*yield*/, importer.credential.generate({\n                                    type: 'CertifiedProductHistory',\n                                    subject: tslib_1.__assign(tslib_1.__assign({}, variables.product), { history: traceabilityPath }),\n                                })];\n                        case 2:\n                            vc1 = _b.sent();\n                            return [4 /*yield*/, importer.present({\n                                    workflow: variables.workflow,\n                                    credentials: [vc1],\n                                })];\n                        case 3:\n                            vp1 = _b.sent();\n                            output.presentations.push(vp1);\n                            return [2 /*return*/, {}];\n                    }\n                });\n            });\n        };\n    const invocation = await taskFunction(this.environment);\n    const output = invocation;\n    next(null, output);\n  })()\n  \n        \n  </script>\n\n<bpmn:incoming>geid_108_5</bpmn:incoming>\n\n<bpmn:outgoing>geid_108_6</bpmn:outgoing>\n</bpmn:scriptTask>\n        \n\n\n<bpmn:endEvent id=\"EndEvent_0\" name=\"End\">\n<bpmn:incoming>geid_108_6</bpmn:incoming>\n</bpmn:endEvent>\n          \n\n\n<bpmn:sequenceFlow \nid=\"geid_108_0\" \nname=\"Import Started\"\nsourceRef=\"StartEvent_0\" \ntargetRef=\"Task_0\">\n\n</bpmn:sequenceFlow>\n      \n\n\n<bpmn:sequenceFlow \nid=\"geid_108_1\" \nname=\"Fill Order\"\nsourceRef=\"Task_0\" \ntargetRef=\"Task_1\">\n\n</bpmn:sequenceFlow>\n      \n\n\n<bpmn:sequenceFlow \nid=\"geid_108_2\" \nname=\"Ocean Transport\"\nsourceRef=\"Task_1\" \ntargetRef=\"Task_2\">\n\n</bpmn:sequenceFlow>\n      \n\n\n<bpmn:sequenceFlow \nid=\"geid_108_3\" \nname=\"Air Transport\"\nsourceRef=\"Task_2\" \ntargetRef=\"Task_3\">\n\n</bpmn:sequenceFlow>\n      \n\n\n<bpmn:sequenceFlow \nid=\"geid_108_4\" \nname=\"Process US Customs Entry\"\nsourceRef=\"Task_3\" \ntargetRef=\"Task_4\">\n\n</bpmn:sequenceFlow>\n      \n\n\n<bpmn:sequenceFlow \nid=\"geid_108_5\" \nname=\"Ship to Importer Of Record\"\nsourceRef=\"Task_4\" \ntargetRef=\"Task_5\">\n\n</bpmn:sequenceFlow>\n      \n\n\n<bpmn:sequenceFlow \nid=\"geid_108_6\" \nname=\"Import Completed\"\nsourceRef=\"Task_5\" \ntargetRef=\"EndEvent_0\">\n\n</bpmn:sequenceFlow>\n      \n</bpmn:process>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n  <bpmndi:BPMNDiagram id=\"Diagram_0\">\n    <bpmndi:BPMNPlane id=\"Plane_0\" bpmnElement=\"Process_0\">\n\n \n    \n\n<bpmndi:BPMNShape id=\"StartEvent_0_di\" bpmnElement=\"StartEvent_0\">\n  <dc:Bounds x=\"0\" y=\"100\" width=\"25\" height=\"25\" />\n\n  <bpmndi:BPMNLabel>\n    <dc:Bounds x=\"0\" y=\"83.33333333333333\" width=\"25\" height=\"25\" />\n  </bpmndi:BPMNLabel>\n</bpmndi:BPMNShape>\n          \n\n\n<bpmndi:BPMNShape id=\"Task_0_di\" bpmnElement=\"Task_0\">\n  <dc:Bounds x=\"200\" y=\"100\" width=\"100\" height=\"100\" />\n\n  <bpmndi:BPMNLabel>\n    <dc:Bounds x=\"200\" y=\"33.33333333333333\" width=\"100\" height=\"100\" />\n  </bpmndi:BPMNLabel>\n</bpmndi:BPMNShape>\n          \n\n\n<bpmndi:BPMNShape id=\"Task_1_di\" bpmnElement=\"Task_1\">\n  <dc:Bounds x=\"400\" y=\"100\" width=\"100\" height=\"100\" />\n\n  <bpmndi:BPMNLabel>\n    <dc:Bounds x=\"400\" y=\"33.33333333333333\" width=\"100\" height=\"100\" />\n  </bpmndi:BPMNLabel>\n</bpmndi:BPMNShape>\n          \n\n\n<bpmndi:BPMNShape id=\"Task_2_di\" bpmnElement=\"Task_2\">\n  <dc:Bounds x=\"600\" y=\"100\" width=\"100\" height=\"100\" />\n\n  <bpmndi:BPMNLabel>\n    <dc:Bounds x=\"600\" y=\"33.33333333333333\" width=\"100\" height=\"100\" />\n  </bpmndi:BPMNLabel>\n</bpmndi:BPMNShape>\n          \n\n\n<bpmndi:BPMNShape id=\"Task_3_di\" bpmnElement=\"Task_3\">\n  <dc:Bounds x=\"800\" y=\"100\" width=\"100\" height=\"100\" />\n\n  <bpmndi:BPMNLabel>\n    <dc:Bounds x=\"800\" y=\"33.33333333333333\" width=\"100\" height=\"100\" />\n  </bpmndi:BPMNLabel>\n</bpmndi:BPMNShape>\n          \n\n\n<bpmndi:BPMNShape id=\"Task_4_di\" bpmnElement=\"Task_4\">\n  <dc:Bounds x=\"1000\" y=\"100\" width=\"100\" height=\"100\" />\n\n  <bpmndi:BPMNLabel>\n    <dc:Bounds x=\"1000\" y=\"33.33333333333333\" width=\"100\" height=\"100\" />\n  </bpmndi:BPMNLabel>\n</bpmndi:BPMNShape>\n          \n\n\n<bpmndi:BPMNShape id=\"Task_5_di\" bpmnElement=\"Task_5\">\n  <dc:Bounds x=\"1200\" y=\"100\" width=\"100\" height=\"100\" />\n\n  <bpmndi:BPMNLabel>\n    <dc:Bounds x=\"1200\" y=\"33.33333333333333\" width=\"100\" height=\"100\" />\n  </bpmndi:BPMNLabel>\n</bpmndi:BPMNShape>\n          \n\n\n<bpmndi:BPMNShape id=\"EndEvent_0_di\" bpmnElement=\"EndEvent_0\">\n  <dc:Bounds x=\"1400\" y=\"100\" width=\"25\" height=\"25\" />\n\n  <bpmndi:BPMNLabel>\n    <dc:Bounds x=\"1400\" y=\"83.33333333333333\" width=\"25\" height=\"25\" />\n  </bpmndi:BPMNLabel>\n</bpmndi:BPMNShape>\n          \n\n\n    <bpmndi:BPMNEdge id=\"geid_108_0_di\" bpmnElement=\"geid_108_0\">\n      \n    </bpmndi:BPMNEdge>\n  \n\n\n    <bpmndi:BPMNEdge id=\"geid_108_1_di\" bpmnElement=\"geid_108_1\">\n      \n    </bpmndi:BPMNEdge>\n  \n\n\n    <bpmndi:BPMNEdge id=\"geid_108_2_di\" bpmnElement=\"geid_108_2\">\n      \n    </bpmndi:BPMNEdge>\n  \n\n\n    <bpmndi:BPMNEdge id=\"geid_108_3_di\" bpmnElement=\"geid_108_3\">\n      \n    </bpmndi:BPMNEdge>\n  \n\n\n    <bpmndi:BPMNEdge id=\"geid_108_4_di\" bpmnElement=\"geid_108_4\">\n      \n    </bpmndi:BPMNEdge>\n  \n\n\n    <bpmndi:BPMNEdge id=\"geid_108_5_di\" bpmnElement=\"geid_108_5\">\n      \n    </bpmndi:BPMNEdge>\n  \n\n\n    <bpmndi:BPMNEdge id=\"geid_108_6_di\" bpmnElement=\"geid_108_6\">\n      \n    </bpmndi:BPMNEdge>\n  \n</bpmndi:BPMNPlane>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  </bpmndi:BPMNDiagram>\n        \n</bpmn:definitions>\n\n\n    ",
  "json": {
    "nodes": [
      {
        "id": "StartEvent_0",
        "shape": "torus",
        "color": "#76FF03",
        "opacity": 1,
        "number": 0,
        "name": "Start",
        "type": "Start"
      },
      {
        "id": "Task_0",
        "shape": "cube",
        "color": "#1E88E5",
        "opacity": 1,
        "number": 1,
        "name": "Order Received in China",
        "type": "Task"
      },
      {
        "id": "Task_1",
        "shape": "cube",
        "color": "#1E88E5",
        "opacity": 1,
        "number": 2,
        "name": "Product Manufactured in China",
        "type": "Task"
      },
      {
        "id": "Task_2",
        "shape": "cube",
        "color": "#1E88E5",
        "opacity": 1,
        "number": 3,
        "name": "Product Shipped to Denmark",
        "type": "Task"
      },
      {
        "id": "Task_3",
        "shape": "cube",
        "color": "#1E88E5",
        "opacity": 1,
        "number": 4,
        "name": "Product Shipped to United States",
        "type": "Task"
      },
      {
        "id": "Task_4",
        "shape": "cube",
        "color": "#1E88E5",
        "opacity": 1,
        "number": 5,
        "name": "US Customs Approval",
        "type": "Task"
      },
      {
        "id": "Task_5",
        "shape": "cube",
        "color": "#1E88E5",
        "opacity": 1,
        "number": 6,
        "name": "Product Sold in US",
        "type": "Task"
      },
      {
        "id": "EndEvent_0",
        "shape": "torus",
        "color": "#FF5252",
        "opacity": 1,
        "number": 7,
        "name": "End",
        "type": "Stop"
      }
    ],
    "links": [
      {
        "id": "geid_108_0",
        "source": "StartEvent_0",
        "target": "Task_0",
        "color": "#fff",
        "opacity": 1,
        "name": "Import Started"
      },
      {
        "id": "geid_108_1",
        "source": "Task_0",
        "target": "Task_1",
        "color": "#fff",
        "opacity": 1,
        "name": "Fill Order"
      },
      {
        "id": "geid_108_2",
        "source": "Task_1",
        "target": "Task_2",
        "color": "#fff",
        "opacity": 1,
        "name": "Ocean Transport"
      },
      {
        "id": "geid_108_3",
        "source": "Task_2",
        "target": "Task_3",
        "color": "#fff",
        "opacity": 1,
        "name": "Air Transport"
      },
      {
        "id": "geid_108_4",
        "source": "Task_3",
        "target": "Task_4",
        "color": "#fff",
        "opacity": 1,
        "name": "Process US Customs Entry"
      },
      {
        "id": "geid_108_5",
        "source": "Task_4",
        "target": "Task_5",
        "color": "#fff",
        "opacity": 1,
        "name": "Ship to Importer Of Record"
      },
      {
        "id": "geid_108_6",
        "source": "Task_5",
        "target": "EndEvent_0",
        "color": "#fff",
        "opacity": 1,
        "name": "Import Completed"
      }
    ]
  },
  "variables": {
    "importer": {
      "id": "did:web:importer.example:0",
      "name": "Acme Shoes (Importer of Record)",
      "location": {
        "lat": 45.494904,
        "long": -122.804836
      },
      "seed": 0
    },
    "manufacturer": {
      "id": "did:web:manufacturer.example:1",
      "name": "鞋匠 (Contract Manufacturer)",
      "location": {
        "lat": 41.12361,
        "long": 122.99
      },
      "seed": 1
    },
    "distributor": {
      "id": "did:web:distributor.example:2",
      "name": "Sko (Product Distributor)",
      "location": {
        "lat": 55.711737,
        "long": 12.562321
      },
      "seed": 2
    },
    "customs": {
      "id": "did:web:regulator.example:3",
      "name": "US Customs (Regulator)",
      "seed": 3
    },
    "oceanCarrier": {
      "id": "did:web:carrier.example:4",
      "name": "Nautiske (Ocean Carrier)",
      "seed": 4
    },
    "airCarrier": {
      "id": "did:web:carrier.example:5",
      "name": "Wright Logistics (Air Carrier)",
      "seed": 5
    },
    "product": {
      "id": "did:web:product.example:6",
      "name": "Road Runners (Product)",
      "type": "Sneakers",
      "seed": 6
    }
  }
}