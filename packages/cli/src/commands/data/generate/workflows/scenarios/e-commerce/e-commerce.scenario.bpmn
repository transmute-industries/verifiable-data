<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" id="new-process-diagram" targetNamespace="http://bpmn.io/schema/bpmn">
  <bpmn:process id="Process_0" isExecutable="true">
    <bpmn:startEvent id="StartEvent_0" name="Start">
      <bpmn:outgoing>geid_52_0</bpmn:outgoing>
    </bpmn:startEvent>
    <bpmn:scriptTask id="Task_0" name="Order Received in China" scriptFormat="JavaScript">
      <bpmn:incoming>geid_52_0</bpmn:incoming>
      <bpmn:outgoing>geid_52_1</bpmn:outgoing>
      <bpmn:script>
    
  
  (async ()=&gt;{
    const {tslib_1} = this.environment.variables;
    const taskFunction = function (_a) {
            var output = _a.output, services = _a.services, variables = _a.variables;
            return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                var manufacturer, vc1, vp1;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // services.console.log('product ordered from China.');
                            output.actors = output.actors || {};
                            output.presentations = output.presentation || [];
                            return [4 /*yield*/, services.fake.actor.generate({
                                    type: 'Organization',
                                    seed: variables.manufacturer.seed, // controls identity
                                })];
                        case 1:
                            manufacturer = _b.sent();
                            output.actors.manufacturer = manufacturer;
                            return [4 /*yield*/, manufacturer.credential.generate({
                                    type: 'CertifiedPurchaseOrder',
                                    subject: {
                                        manufacturer: variables.manufacturer,
                                        product: variables.product,
                                    },
                                })];
                        case 2:
                            vc1 = _b.sent();
                            return [4 /*yield*/, manufacturer.present({
                                    workflow: variables.workflow,
                                    credentials: [vc1],
                                })];
                        case 3:
                            vp1 = _b.sent();
                            output.presentations.push(vp1);
                            return [2 /*return*/, {}];
                    }
                });
            });
        };
    const invocation = await taskFunction(this.environment);
    const output = invocation;
    next(null, output);
  })()
  
        
  </bpmn:script>
    </bpmn:scriptTask>
    <bpmn:scriptTask id="Task_1" name="Product Manufactured in China" scriptFormat="JavaScript">
      <bpmn:incoming>geid_52_1</bpmn:incoming>
      <bpmn:outgoing>geid_52_2</bpmn:outgoing>
      <bpmn:script>
    
  
  (async ()=&gt;{
    const {tslib_1} = this.environment.variables;
    const taskFunction = function (_a) {
            var output = _a.output, variables = _a.variables;
            return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                var manufacturer, vc1, vc2, vc3, vp1;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            manufacturer = output.actors.manufacturer;
                            return [4 /*yield*/, manufacturer.credential.generate({
                                    type: 'CertifiedOrigin',
                                    subject: tslib_1.__assign({}, variables.product),
                                })];
                        case 1:
                            vc1 = _b.sent();
                            return [4 /*yield*/, manufacturer.credential.generate({
                                    type: 'CertifiedCommercialInvoice',
                                    subject: tslib_1.__assign({}, variables.product),
                                })];
                        case 2:
                            vc2 = _b.sent();
                            return [4 /*yield*/, manufacturer.credential.generate({
                                    type: 'CertifiedPackingList',
                                    subject: tslib_1.__assign({}, variables.product),
                                })];
                        case 3:
                            vc3 = _b.sent();
                            return [4 /*yield*/, manufacturer.present({
                                    workflow: variables.workflow,
                                    credentials: [vc1, vc2, vc3],
                                })];
                        case 4:
                            vp1 = _b.sent();
                            output.presentations.push(vp1);
                            return [2 /*return*/, {}];
                    }
                });
            });
        };
    const invocation = await taskFunction(this.environment);
    const output = invocation;
    next(null, output);
  })()
  
        
  </bpmn:script>
    </bpmn:scriptTask>
    <bpmn:scriptTask id="Task_2" name="Product Shipped to Denmark" scriptFormat="JavaScript">
      <bpmn:incoming>geid_52_2</bpmn:incoming>
      <bpmn:outgoing>geid_52_3</bpmn:outgoing>
      <bpmn:script>
    
  
  (async ()=&gt;{
    const {tslib_1} = this.environment.variables;
    const taskFunction = function (_a) {
            var output = _a.output, services = _a.services, variables = _a.variables;
            return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                var oceanCarrier, vc1, vp1;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, services.fake.actor.generate({
                                type: 'Organization',
                                seed: variables.oceanCarrier.seed,
                            })];
                        case 1:
                            oceanCarrier = _b.sent();
                            output.actors.oceanCarrier = oceanCarrier;
                            return [4 /*yield*/, oceanCarrier.credential.generate({
                                    type: 'CertifiedBillOfLading',
                                    subject: tslib_1.__assign({}, variables.product),
                                })];
                        case 2:
                            vc1 = _b.sent();
                            return [4 /*yield*/, oceanCarrier.present({
                                    workflow: variables.workflow,
                                    credentials: [vc1],
                                })];
                        case 3:
                            vp1 = _b.sent();
                            output.presentations.push(vp1);
                            return [2 /*return*/, {}];
                    }
                });
            });
        };
    const invocation = await taskFunction(this.environment);
    const output = invocation;
    next(null, output);
  })()
  
        
  </bpmn:script>
    </bpmn:scriptTask>
    <bpmn:scriptTask id="Task_3" name="Product Shipped to United States" scriptFormat="JavaScript">
      <bpmn:incoming>geid_52_3</bpmn:incoming>
      <bpmn:outgoing>geid_52_4</bpmn:outgoing>
      <bpmn:script>
    
  
  (async ()=&gt;{
    const {tslib_1} = this.environment.variables;
    const taskFunction = function (_a) {
            var output = _a.output, services = _a.services, variables = _a.variables;
            return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                var distributor, airCarrier, vc1, vc2, vc3, vp1;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, services.fake.actor.generate({
                                type: 'Organization',
                                seed: variables.distributor.seed,
                            })];
                        case 1:
                            distributor = _b.sent();
                            output.actors.distributor = distributor;
                            return [4 /*yield*/, services.fake.actor.generate({
                                    type: 'Organization',
                                    seed: variables.airCarrier.seed,
                                })];
                        case 2:
                            airCarrier = _b.sent();
                            output.actors.airCarrier = airCarrier;
                            return [4 /*yield*/, distributor.credential.generate({
                                    type: 'CertifiedUSImportDeclaration',
                                    subject: tslib_1.__assign({}, variables.product),
                                })];
                        case 3:
                            vc1 = _b.sent();
                            return [4 /*yield*/, distributor.credential.generate({
                                    type: 'CertifiedCommercialInvoice',
                                    subject: tslib_1.__assign({}, variables.product),
                                })];
                        case 4:
                            vc2 = _b.sent();
                            return [4 /*yield*/, airCarrier.credential.generate({
                                    type: 'CertifiedAirWaybill',
                                    subject: tslib_1.__assign({}, variables.product),
                                })];
                        case 5:
                            vc3 = _b.sent();
                            return [4 /*yield*/, airCarrier.present({
                                    workflow: variables.workflow,
                                    credentials: [vc1, vc2, vc3],
                                })];
                        case 6:
                            vp1 = _b.sent();
                            output.presentations.push(vp1);
                            return [2 /*return*/, {}];
                    }
                });
            });
        };
    const invocation = await taskFunction(this.environment);
    const output = invocation;
    next(null, output);
  })()
  
        
  </bpmn:script>
    </bpmn:scriptTask>
    <bpmn:scriptTask id="Task_4" name="US Customs Approval" scriptFormat="JavaScript">
      <bpmn:incoming>geid_52_4</bpmn:incoming>
      <bpmn:outgoing>geid_52_5</bpmn:outgoing>
      <bpmn:script>
    
  
  (async ()=&gt;{
    const {tslib_1} = this.environment.variables;
    const taskFunction = function (_a) {
            var output = _a.output, services = _a.services, variables = _a.variables;
            return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                var customs, vc1, vp1;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, services.fake.actor.generate({
                                type: 'Organization',
                                seed: variables.customs.seed,
                            })];
                        case 1:
                            customs = _b.sent();
                            output.actors.customs = customs;
                            return [4 /*yield*/, customs.credential.generate({
                                    type: 'CertifiedImportAproval',
                                    subject: tslib_1.__assign({}, variables.product),
                                })];
                        case 2:
                            vc1 = _b.sent();
                            return [4 /*yield*/, customs.present({
                                    workflow: variables.workflow,
                                    credentials: [vc1],
                                })];
                        case 3:
                            vp1 = _b.sent();
                            output.presentations.push(vp1);
                            return [2 /*return*/, {}];
                    }
                });
            });
        };
    const invocation = await taskFunction(this.environment);
    const output = invocation;
    next(null, output);
  })()
  
        
  </bpmn:script>
    </bpmn:scriptTask>
    <bpmn:scriptTask id="Task_5" name="Product Sold in US" scriptFormat="JavaScript">
      <bpmn:incoming>geid_52_5</bpmn:incoming>
      <bpmn:outgoing>geid_52_6</bpmn:outgoing>
      <bpmn:script>
    
  
  (async ()=&gt;{
    const {tslib_1} = this.environment.variables;
    const taskFunction = function (_a) {
            var output = _a.output, services = _a.services, variables = _a.variables;
            return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                var importer, traceabilityPath, vc1, vp1;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, services.fake.actor.generate({
                                type: 'Organization',
                                seed: variables.importer.seed,
                            })];
                        case 1:
                            importer = _b.sent();
                            output.actors.importer = importer;
                            traceabilityPath = output.path.map(function (i) {
                                return { id: i.id, name: i.name };
                            });
                            return [4 /*yield*/, importer.credential.generate({
                                    type: 'CertifiedProductHistory',
                                    subject: tslib_1.__assign(tslib_1.__assign({}, variables.product), { history: traceabilityPath }),
                                })];
                        case 2:
                            vc1 = _b.sent();
                            return [4 /*yield*/, importer.present({
                                    workflow: variables.workflow,
                                    credentials: [vc1],
                                })];
                        case 3:
                            vp1 = _b.sent();
                            output.presentations.push(vp1);
                            return [2 /*return*/, {}];
                    }
                });
            });
        };
    const invocation = await taskFunction(this.environment);
    const output = invocation;
    next(null, output);
  })()
  
        
  </bpmn:script>
    </bpmn:scriptTask>
    <bpmn:endEvent id="EndEvent_0" name="End">
      <bpmn:incoming>geid_52_6</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:sequenceFlow id="geid_52_0" name="Import Started" sourceRef="StartEvent_0" targetRef="Task_0" />
    <bpmn:sequenceFlow id="geid_52_1" name="Fill Order" sourceRef="Task_0" targetRef="Task_1" />
    <bpmn:sequenceFlow id="geid_52_2" name="Ocean Transport" sourceRef="Task_1" targetRef="Task_2" />
    <bpmn:sequenceFlow id="geid_52_3" name="Air Transport" sourceRef="Task_2" targetRef="Task_3" />
    <bpmn:sequenceFlow id="geid_52_4" name="Process US Customs Entry" sourceRef="Task_3" targetRef="Task_4" />
    <bpmn:sequenceFlow id="geid_52_5" name="Ship to Importer Of Record" sourceRef="Task_4" targetRef="Task_5" />
    <bpmn:sequenceFlow id="geid_52_6" name="Import Completed" sourceRef="Task_5" targetRef="EndEvent_0" />
  </bpmn:process>
  <bpmndi:BPMNDiagram id="Diagram_0">
    <bpmndi:BPMNPlane id="Plane_0" bpmnElement="Process_0">
      <bpmndi:BPMNEdge id="geid_52_3_di" bpmnElement="geid_52_3">
        <di:waypoint x="660" y="200" />
        <di:waypoint x="660" y="430" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="698" y="308" width="63" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="geid_52_2_di" bpmnElement="geid_52_2">
        <di:waypoint x="490" y="150" />
        <di:waypoint x="610" y="150" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="509" y="125" width="82" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="geid_52_1_di" bpmnElement="geid_52_1">
        <di:waypoint x="290" y="150" />
        <di:waypoint x="390" y="150" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="317" y="125" width="46" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="geid_52_0_di" bpmnElement="geid_52_0">
        <di:waypoint x="32" y="150" />
        <di:waypoint x="190" y="150" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="74" y="126" width="70" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="geid_52_4_di" bpmnElement="geid_52_4">
        <di:waypoint x="610" y="480" />
        <di:waypoint x="490" y="480" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="518" y="443" width="73" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="geid_52_5_di" bpmnElement="geid_52_5">
        <di:waypoint x="390" y="480" />
        <di:waypoint x="290" y="480" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="305" y="443" width="79" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="geid_52_6_di" bpmnElement="geid_52_6">
        <di:waypoint x="190" y="480" />
        <di:waypoint x="32" y="480" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="70" y="443" width="88" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="StartEvent_0_di" bpmnElement="StartEvent_0">
        <dc:Bounds x="7" y="137" width="25" height="25" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="8" y="120" width="24" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Task_0_di" bpmnElement="Task_0">
        <dc:Bounds x="190" y="100" width="100" height="100" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="200" y="33.33333333333333" width="100" height="100" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Task_1_di" bpmnElement="Task_1">
        <dc:Bounds x="390" y="100" width="100" height="100" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="400" y="33.33333333333333" width="100" height="100" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Task_2_di" bpmnElement="Task_2">
        <dc:Bounds x="610" y="100" width="100" height="100" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="600" y="33.33333333333333" width="100" height="100" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Task_3_di" bpmnElement="Task_3">
        <dc:Bounds x="610" y="430" width="100" height="100" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="800" y="33.33333333333333" width="100" height="100" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="EndEvent_0_di" bpmnElement="EndEvent_0">
        <dc:Bounds x="7" y="467" width="25" height="25" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="10" y="450" width="20" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Task_4_di" bpmnElement="Task_4">
        <dc:Bounds x="390" y="430" width="100" height="100" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1000" y="33.33333333333333" width="100" height="100" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Task_5_di" bpmnElement="Task_5">
        <dc:Bounds x="190" y="430" width="100" height="100" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1200" y="33.33333333333333" width="100" height="100" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>
